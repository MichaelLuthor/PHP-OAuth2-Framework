<?php
namespace X\Service\XAction\Management\Action;
use X\Core\X;
use X\Module\SystemManager\Library\ServiceManagementAction;

class InitModule extends ServiceManagementAction {
    /**
     * (non-PHPdoc)
     * @see \X\Module\SystemManager\Library\ServiceManagementAction::run()
     */
    public function run() {
        $viewData = array();
        $viewData['status'] = null;
        $viewData['defaultActionName'] = $this->getParam('defaultActionName', 'index');
        $viewData['moduleName'] = $this->getParam('moduleName', '');
        
        $moduleName = $this->getParam('moduleName');
        if ( null !== $moduleName ) {
            $viewData['status'] = $this->initModule($moduleName);
        }
        
        $moduleNames = X::system()->getModuleManager()->getList();
        $modules = array();
        foreach ( $moduleNames as $moduleName ) {
            $modules[$moduleName] = X::system()->getModuleManager()->get($moduleName);
        }
        $viewData['modules'] = $modules;
        
        $this->render('InitModule', $viewData);
    }
    
    /**
     * @param unknown $moduleName
     * @return multitype:string
     */
    private function initModule( $moduleName ) {
        if ( empty($moduleName) ) {
            return array('danger', 'module could not be empty.');
        }
        
        if ( $this->getModule()->getName() === $moduleName ) {
            return array('danger', 'management module could not be inited.');
        }
        
        $module = X::system()->getModuleManager()->get($moduleName);
        $moduleInfo = new \ReflectionClass($module);
        $moduleFilePath = $moduleInfo->getFileName();
        
        $runMethodInfo = new \ReflectionMethod($module, 'run');
        $runMethodFilePath = $runMethodInfo->getFileName();
        
        if ( $moduleFilePath === $runMethodFilePath ) {
            $runMethodStartLine = $runMethodInfo->getStartLine();
            $runMethodDocComment = $runMethodInfo->getDocComment();
            $runMethodDocComment = str_replace("\r", '', $runMethodDocComment);
            $runMethodDocComment = explode("\n", $runMethodDocComment);
            $runMethodStartLine -= count($runMethodDocComment)+1;
            $runMethodLength = $runMethodInfo->getEndLine() - $runMethodStartLine;
        } else {
            $runMethodStartLine = $moduleInfo->getEndLine() - 1;
            $runMethodLength = 0;
        }
        
        $moduleFileContent = file_get_contents($moduleFilePath);
        
        $moduleFileContentArray = str_replace("\r", '', $moduleFileContent);
        $moduleFileContentArray = explode("\n", $moduleFileContentArray);
        
        $tab = "\t";
        if ( false === strpos($moduleFileContent, "\t") ) {
            $tab = '    ';
        }
        
        $xactionRunMethod = $this->getRunMethodContentArray($tab);
        array_splice($moduleFileContentArray, $runMethodStartLine, $runMethodLength, $xactionRunMethod);
        
        $useEndPosition = 0;
        for ( $lineNumber=0; $lineNumber<count($moduleFileContentArray); $lineNumber++ ) {
            if ( 0 === preg_match('/use (.*?);/', $moduleFileContentArray[$lineNumber]) ) {
                continue;
            }
            $useEndPosition = $lineNumber;
            break;
        }
        
        if ( false === strpos($moduleFileContent, 'use X\\Service\\XAction\\Service') ) {
            array_splice($moduleFileContentArray, $useEndPosition, 0, array('use X\Service\XAction\Service as XActionService;'));
        }
        
        if ( false === strpos($moduleFileContent, 'use X\\Core\\X') ) {
            array_splice($moduleFileContentArray, $useEndPosition, 0, array('use X\\Core\\X;'));
        }
        
        file_put_contents($moduleFilePath, implode("\n", $moduleFileContentArray));
        
        unset($moduleFileContentArray[0]);
        $moduleFileContent = implode("\n", $moduleFileContentArray);
        
        $actionFolderPath = $module->getPath('Action/');
        if ( !is_dir($actionFolderPath) ) {
            mkdir($actionFolderPath);
        }
        
        return array('success', 'target module has been inited.', $moduleFileContent);
    }
    
    /**
     * @return array
     */
    private function getRunMethodContentArray($tab) {
        $defaultActionName = $this->getParam('defaultActionName');
        if ( null === $defaultActionName ) {
            $defaultActionName = 'index';
        }
        
        $content = array();
        $content[] = $tab.'/**';
        $content[] = $tab.' * Start XAction service to handle actions.';
        $content[] = $tab.' * ';
        $content[] = $tab.' * Generated by XAction Service.';
        $content[] = $tab.' * @see \X\Core\Module\XModule::run()';
        $content[] = $tab.' */';
        $content[] = $tab.'public function run($parameters = array()) {';
        $content[] = $tab.'    $actionService = X::system()->getServiceManager()->get(XActionService::getServiceName());';
        $content[] = $tab.'';
        $content[] = $tab.'    $namespace = get_class($this);';
        $content[] = $tab.'    $namespace = substr($namespace, 0, strrpos($namespace, \'\\\\\'));';
        $content[] = $tab.'    $group = $this->getName();';
        $content[] = $tab.'    $actionService->addGroup($group, $namespace);';
        $content[] = $tab.'    $actionService->getParameterManager()->merge($parameters);';
        $content[] = $tab.'    $actionService->setGroupDefaultAction($group, \''.$defaultActionName.'\');';
        $content[] = $tab.'    return $actionService->runGroup($group);';
        $content[] = $tab.'}';
        
        return $content;
    }
}